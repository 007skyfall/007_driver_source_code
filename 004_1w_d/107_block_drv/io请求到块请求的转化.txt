ll_rw_block(int rw, int nr, struct buffer_head *bhs[])
	submit_bh(WRITE, bh);
		//构造bio
		struct bio *bio;
		bio = bio_alloc(GFP_NOIO, 1);
		bio->bi_sector = bh->b_blocknr * (bh->b_size >> 9);
		bio->bi_bdev = bh->b_bdev;
		bio->bi_io_vec[0].bv_page = bh->b_page;
		bio->bi_io_vec[0].bv_len = bh->b_size;
		bio->bi_io_vec[0].bv_offset = bh_offset(bh);
		bio->bi_vcnt = 1;
		bio->bi_idx = 0;
		bio->bi_size = bh->b_size;
		bio->bi_end_io = end_bio_bh_io_sync;
		bio->bi_private = bh;
		//提交bio
		submit_bio(rw, bio);
			//将bio构造成request结构体
			generic_make_request(bio);
				//将相同的io请求放在同一个request中
				q->make_request_fn(q, bio);
					q->make_request_fn = mfn;
						 blk_queue_make_request(struct request_queue *q, make_request_fn *mfn)
						 blk_queue_make_request(q, blk_queue_bio);
						 blk_queue_bio：
							el_ret = elv_merge(q, &req, bio);  //使用电梯优化算法对bio进行合并
							                                   //如果合并不成功册重新分配request
							add_acct_request(q, req, where);
								__elv_add_request(q, rq, where);
									__blk_run_queue(q); 
										q->request_fn(q);       //执行队列
							
							
							
							
							
							
							
							
							
							
							
							
							