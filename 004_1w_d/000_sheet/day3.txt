【1】复习：
	1.字符设备驱动
	
	应用层： open   read   write close
	----------|------------------------------
	/dev/    文件1    文件2    文件3 ...
			 sudo mknod /dev/mycdev c 250 0
	--------------|-------------------------
	内核层：     设备号1
				  |
			----cdev1---cdev2----cdev3--...----
				|
				|-->fops{
					int (*open)();
					......
				}
	---------------------------------------
	硬件层：
	
	2.创建字符设备驱动的流程
		1.分配对象
			struct cdev *pcdev;
			pcdev = cdev_alloc();
		2.初始化
			cdev_init(pcdev,&fops);
			
		3.申请设备号
			静态申请: register_chrdev_region();
			动态申请: alloc_chrdev_region();
		4.注册
			cdev_add(pcdev,设备号，count);
	
	3.数据拷贝
		copy_from_user()
		copy_to_user();
		
	4.映射
		ioremap(物理地址，长度);
		
【2】字符设备驱动
	 int register_chrdev(unsigned int major, const char *name,
                  const struct file_operations *fops)
	功能：一个函数可以注册字符设备驱动(设备的个数是256个)
	参数：
		@major:major>0 指定设备号  major=0自动分配设备号
		@name :名字
		@fops :操作方法集
	返回值：如果major>0,成功返回0，失败返回错误码
			如果major=0,成功返回主设备号，失败返回错误码
			
	void unregister_chrdev(unsigned int major, const char *name)
	功能：注销字符设备驱动
	参数：
		@major:主设备号
		@name :名字
	返回值：无

	练习：
		1.字符设备驱动的实现	
		
		

【3】ioctl函数
	应用层
		#include <sys/ioctl.h>
		int ioctl(int fd, int request, ...);
		参数1：文件描述符fd
		参数2：request命令码，内核封装的
		参数3：可变参数

	---------------------------------------
	内核层：fops:
		long (*unlocked_ioctl) (struct file *, unsigned int cmd, unsigned long args);

		
	命令码：32位
		方向 2   大小 14  类型 8  序号 8
	
		#define _IO(type,nr)	
			_IOC(_IOC_NONE,(type),(nr),0)
		#define _IOR(type,nr,size)
			_IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))
		#define _IOW(type,nr,size)	
			_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))
		#define _IOWR(type,nr,size)	
			_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size))
				
		#define _IOC(dir,type,nr,size) \
			(((dir)  << _IOC_DIRSHIFT) | \  -->30
			 ((type) << _IOC_TYPESHIFT) | \ -->8
			 ((nr)   << _IOC_NRSHIFT) | \   -->0
			 ((size) << _IOC_SIZESHIFT))    -->16



			 
		#define LED1_ON  _IOW('a',0,int)
		#define LED1_OFF  _IOW('a',1,int)
		
		#define LED1_OP  _IOW('a',3,int)
				
	linux-3.14.1/Documentation/ioctl$ vi ioctl-number.txt 
	文件中写出来的命令码已经被内核使用了，在用的时候尽量保证不重复
	
	
【4】自动创建设备节点
	1.devfs
	  在linux2.4内核中引入了devfs，即/dev，有点类似/proc，它是一种虚拟文件系统。
	  只是在需要时才动态地生成需要的设备文件，不像以前不管用不用必须先建好一大
	  堆设备文件。
		具体来说，devfs具有如下特点：
		1.可以通过程序在设备初始化时在/dev目录下创建设备文件，卸载设备时将它删除。
		2.设备驱动程序可以指定设备名、所有者和权限位，用户空间仍可以修改所有者和权限位。
		3.不再需要为设备驱动程序分配主设备号以及此设备号，在devfs_register()中指定此设备号。
		devfs_handle_t devfs_mk_dir(devfs_handle_t dir,const char *name,void *info);
		devfs_handle_t devfs_register(devfs_handle_t dir,const char *name,unsigned int flags,
		unsigned int major,insigned int minor,umode_t mode,void *fops,void *info);
		void devfs_unregister(devfs_handle_t de);
	
	2.udev
		虽然devfs在2.4的内核中被认为十分好用的机制，但是在linux2.6的内核中被废弃，
		废弃的原因有一下几点：
		1.devfs创建设备节点是在内核中完成的，在内核中只能有机制，不能有策略
		2.devfs相当于婚介所，当驱动来了之后自动分配对象
		3.devfs会根据硬件和系统状态自动创建和删除设备节点，驱动不存在但节点存在
		4.当用户操作设备节点会自动安装驱动
		
		udev规避了上述的devfs的缺点，udev在在用户空间执行的，当驱动模块加载或插入内核时，
		内核会自动向用户空间发送热插拔事件[/proc/sys/kernel/hotplug]，并将驱动对象的年
		龄，家庭情况，收入等信息发送给用户空间（sys），在用户空间实现自由恋爱。udev就可
		以根据这些信息创建设备节点。这些设备节点都是真实存在的。
		
	3.mdev
		在嵌入式设备中普遍使用，mdev是轻量级的udev。mdev是busybox提供的	

	
		
		1.向sys下提交目录
		cls = class_create(owner, name) (最后一句话执行的结果)	
		//void class_destroy(struct class *cls)
		功能：提交目录名
		参数：
			@owner :THIS_MODULE
			@name  :目录的名字
		返回值：成功返回struct class *，失败返回错误码指针
		if(IS_ERR(cls)) ---->是错误
		PTR_ERR    //将错误码指针转化为错误码
		ERR_PTR    //将错误码转化为指针
	
	
	
		2.设备节点的名字提交（设备号）
		struct device *device_create(struct class *class, struct device *parent,
			     dev_t devt, void *drvdata, const char *fmt, ...)
		//void device_destroy(struct class *class, dev_t devt)
		功能：设备节点的名字提交（设备号）
		参数：
			@class  :struct class结构体指针
			@parent :NULL
			@devt   :设备号
			@drvdata:NULL
			@...    :可变参数  "%s,%d",uart,10
		返回值：成功返回struct device *，失败返回错误码指针
	
【5】驱动自动安装
		1.把驱动编译到内核中 uImage
		2..ko,
			rootfs/etc/init.d/rcS --->自启动脚本
			insmod hello.ko
			mknod hello c 253 0
			./a.out	
	练习：
		1.使用ioctl函数实现流水灯实例
	
	练习：
		1.自动创建设备节点
			
	
作业：
	1.在驱动中创建4个设备节点，操作hello0，led0
	
		hello0  hello1  hello2  hello3  <---inode
	---------------------------------------------------------
		hello.c驱动
	---------------------------------------------------------	
		led0   led1    led2     led3 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	