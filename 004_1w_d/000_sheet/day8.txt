【1】复习
	1.中断设备树
		fs4412-key{
			key2 = <&gpx1 1 0>;
			key3 = <&gpx1 2 0>;
			
			interrupt-parent = <&gpx1>;
			interrupts = <1 0>,<2 0>;
		};
	2.驱动
		node = of_find_node_by_path("/fs4412-key");
		gpio = of_get_named_gpio(node,"key2",0);
		irq = gpio_to_irq(gpio);
		
		node = of_find_node_by_path("/fs4412-key");
		irq = irq_of_parse_and_map(node,0);
		//irq_to_irq(irq)
		request_irq(irq,中断处理函数,触发方式,name,dev);
		free_irq(irq,dev);
		
	3.内核定时器(.config-->CONFIG_HZ = 200)
		struct timer_list mytimer;
		mytimer.expries = jiffies + 2;
		mytimer.function = 定时器处理函数
		mytimer.data = 0;
		init_timer(&mytimer);
		add_timer(&mytimer);
		mod_timer(&mytimer,jiffies+2);
		
	4.中断底半部
【1】软中断
	1.enum{
		FAR_SOFTIRQ,
	};
	open_softirq(FAR_SOFTIRQ,底半部处理函数);
	raise_softirq(FAR_SOFTIRQ);
	
asm_do_IRQ	//汇编跳转到c执行的函数入口
	handle_IRQ(irq, regs);
		generic_handle_irq(irq);
			generic_handle_irq_desc(irq, desc);
			desc->handle_irq(irq, desc);
			chip.c (D:\code\linux-3.14\kernel\irq):
		irq_set_chip_and_handler_name(irq, &d->chip, handle_level_irq,
			  "level");					
			__irq_set_handler(irq, handle_level_irq, 0, name);
				desc->handle_irq = handle_level_irq;
		handle_level_irq:
			handle_irq_event(desc);
			ret = handle_irq_event_percpu(desc, action);
				res = action->handler(irq, action->dev_id);
				//回调驱动工程师使用request_irq注册的中断处理函数
			irqd_clear(&desc->irq_data, IRQD_IRQ_INPROGRESS);
				//清除中断状态标志位
		irq_exit();
			if (!in_interrupt() && local_softirq_pending())
			invoke_softirq();  //执行软中断
			-->当条件为真时执行软中断处理函数，当你在中断处理函数
			中调用raise_softirq时，条件才为真。
			 
【2】tasklet(基于软中断实现)
		enum
		{
			TASKLET_SOFTIRQ,
		};
		open_softirq(TASKLET_SOFTIRQ, tasklet_action);
		tasklet_schedule(struct tasklet_struct *t)
			__tasklet_schedule(t);
			raise_softirq(TASKLET_SOFTIRQ);
			
	1.定义对象
		struct tasklet_struct tasklet;
	2.初始化tasklet
		tasklet_init(struct tasklet_struct *t,
		void (*func)(unsigned long data), unsigned long data);
	3.回调tasklet的底半部处理函数		
		tasklet_schedule(struct tasklet_struct *t)
		
	练习：
		1.tasklet的使用
		
		
【3】工作队列
	//工作在进程上下文,底半部中既可以延时也可以做耗时操作。
	1.分配对象
	struct work_struct {
		work_func_t func; //底半部的处理函数
	};
	typedef void (*work_func_t)(struct work_struct *work);
	
	struct work_struct work;
	
	2对象初始化
		INIT_WORK(&work, _func)<-func底半部处理函数	
	
	3.调用
		schedule_work(struct work_struct *work)
	
【4】platform总线
	驱动会被分为三个部分，设备信息，platform(总线)，驱动。
	不管是设备信息还是驱动安装的时候都会去遍历对象的链表，
	发现对方链表中对应节点中的name和自己的name是一样，接着
	执行驱动的probe函数，会把设备信息携带到probe函数中
	
	
	---------------------------------------------|-----------
		        |                          |
	设备信息端	|    总线                  |驱动端：（驱动工程师）
  （驱动工程师）|    linux内核工程师       |向下操作硬件，向上（user）
地址或中断信息	|    已经写完的            |提供操作的方法
	等	        |                          |
		        |                          |
	----------------------------------------------|----------
		
	设备信息端：
		1.分配对象
			struct platform_device pdev;
		2.对象初始化
			struct platform_device {
				const char	*name; //用于匹配的名字
				int		id;        //-1（总线号）没意思
				struct device	dev; //父类，(内核链表相关的操作)
				u32		num_resources; //设备信息的个数
				struct resource	*resource;//设备信息结构体
			};
			struct device {
				struct bus_type	*bus;	
				void	(*release)(struct device *dev);
			}
			struct resource {
				resource_size_t start; 
				resource_size_t end;   
				unsigned long flags;   
			};
			//起始地址 0x114001e0    0x114001e0       100
			//结束地址 0x114001e0+3  0x114001e0+n     100
			//资源的类型IORESOURCE_IO IORESOURCE_MEM  IORESOURCE_IRQ

			IORESOURCE_IO     //IO资源
			IORESOURCE_MEM    //内存资源    
			IORESOURCE_IRQ    //中断资源

		3.对象注册/注销
			int platform_device_register(struct platform_device *pdev);
			void platform_device_unregister(struct platform_device *pdev)
		
	驱动端：
		1.分配对象
			struct platform_driver pdrv;
		2.对象初始化
		struct platform_driver {
			int (*probe)(struct platform_device *);
			//匹配成功后执行的函数
			int (*remove)(struct platform_device *);
			//分离时执行的函数
			struct device_driver driver;
			const struct platform_device_id *id_table; //idtable匹配
		};
		struct device_driver {
			const char		*name;  //用户匹配的
			//struct bus_type		*bus;//总线类型，内核填充的
			struct module		*owner;//THIS_MODULE
		}
		3.对象注册/注销	
		platform_driver_register(drv)
		void platform_driver_unregister(struct platform_driver *drv)
【5】资源的获取函数
	struct resource *platform_get_resource(
			struct platform_device *dev,
			unsigned int type, unsigned int num)	
	功能：在probe函数获取设备信息
	参数：
		@dev :设备信息的对象
		@type:资源的类型
		@num :同类中的第几个
	返回值：成功struct resource *结构体指针
			失败返回NULL
	
			
	int platform_get_irq(struct platform_device *dev, unsigned int num)	
	功能：在probe函数获取中断设备信息
	参数：
		@dev :设备信息的对象
		@num :同类中的第几个
	返回值：成功返回中断号，失败返回错误码


	练习：(练习到14:42)
		1.platform驱动

		
【6】platform idtable匹配
	struct platform_device_id {
		char name[PLATFORM_NAME_SIZE];
		kernel_ulong_t driver_data;
	};
	
	struct platform_device_id  idtable[] = {
		{"hello0",0},
		{"hello1",0},
		{"hello2",0},
		{"hello3",0},
		{}, //表示结束
	};
	
【7】设备树匹配
	const struct of_device_id	*of_match_table;
	struct of_device_id
	{
		char	compatible[128];  //匹配
		const void *data;
	};
	const struct of_device_id platform_pdrv_oftable[] = {
		{.compatible = "hello1",},
		{.compatible = "hello2",},
	};	
		
	compatible = "厂商,设备名"
		
platform-hello{
    compatible = "hello2";
    reg = <0x114001e0 0x4>; -->对应的类型IORESOURCE_MEM;
    interrupt-parent = <&gpx3>;
    interrupts = <1 0>;
};
		
	start_kernel->
		init_IRQ()->
			irqchip_init()->
				of_irq_init(__irqchip_begin);

void __init of_irq_init(const struct of_device_id *matches)
	irq_init_cb = (of_irq_init_cb_t)matchs->data;
	ret = irq_init_cb(desc->dev, desc->interrupt_parent);

	VMLINUX_SYMBOL(__irqchip_begin) = .; 			
	*(__irqchip_of_table)		  			
	*(__irqchip_of_end)
		--->在连接脚本中分配一个内存
		
#define IRQCHIP_DECLARE(name,compstr,fn)				\
	static const struct of_device_id irqchip_of_match_##name	\
	__used __section(__irqchip_of_table)<-告诉编译器将变量放到指定的段中
	= { .compatible = compstr, .data = fn }

IRQCHIP_DECLARE(cortex_a9_gic, "arm,cortex-a9-gic", gic_of_init);
gic_of_init：
	irq = irq_of_parse_and_map(node, 0);
	<-将硬件中断号映射成软中断号

【8】platform ADC实例
	地址：0x126C_0000
	中断：10  <-combiner
    combiner:interrupt-controller@10440000 {
        compatible = "samsung,exynos4210-combiner";
        interrupt-controller;
        #interrupt-cells = <2>;
        reg = <0x10440000 0x1000>;
        interrupts = <0 0 0>, <0 1 0>, <0 2 0>, <0 3 0>, 
                 <0 4 0>, <0 5 0>, <0 6 0>, <0 7 0>, 
                 <0 8 0>, <0 9 0>, <0 10 0>, <0 11 0>, 
                 <0 12 0>, <0 13 0>, <0 14 0>, <0 15 0>; 
    };  

Documentation/devicetree/bindings/arm/samsung$ vi interrupt-combiner.txt

	fs4412-adc{
		compatible = "fs4412-adc";
		reg = <0x126C0000 0x14>;
		interrupt-parent = <&combiner>;
		interrupts = <10 3>;
	}
	10:中断号
	3 ：10号中断这个中的第几个
		
		
		
		
		
		
		
		
		
		
		
		