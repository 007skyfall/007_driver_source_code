【1】复习
	中断底半部
		1.软中断（给系统使用）
		2.tasklet
			1.定义对象
				struct tasklet_struct tasklet;
			2.初始化对象
				tasklet_init(&tasklet,底半部处理函数,data);
			3.调用执行
				tasklet_schedule(&tasklet);
		3.工作队列
			1.定义对象
				struct work_struct work;
			2.初始化
				INIT_WORK(&work,底半部处理函数);
			3.调用执行
				schedule_work(&work);
				
	platform总线驱动
	--------------------------------------
	设备信息
	---------------------------------------
	总线
	---------------------------------------
	驱动
	---------------------------------------
	driver
	
	
	1.设备信息端
		struct platform_device{
			.name = "hello",
			.id   = -1,
			.dev = {
				.release = platfrom_dev,
			}
			.resource = res,
			.resource_num = ARRAY_SIZE(res),
		}
	
		struct resource res[] = {
			[0] = {
				.start = 0x114001e0,
				.end   = 0x114001e0 + 3,
				.flags = IORESOURCE_MEM,
			},
			[1] = {
				.start = 100,
				.end   = 100,
				.flags = IORESOURCE_IRQ,
			}
			
		};
		platform_device_register();
		platform_device_unregister();
		
	2.驱动端
		struct platform_driver platform_drv = {
			.probe = platform_drv_probe,
			.remove = platform_drv_remove,
			.driver = {
				.name = "hello",
				.owner = THIS_MODULE,
				.of_match_table = of_idtable,
			},
			.id_table = platform_drv_idtable,
			
		};
		
		struct platform_device_id platform_drv_idtable[] = {
			{"hello",},
			{},
		};
		struct of_device_id of_idtable[] = {
			{"hello",},
			{},
		};
		
		platform_driver_register();
		platform_driver_unregister();
	
	
		module_platform_driver(__platform_driver) 
		//完成入口出口的定义，以及对象的注册和注销
		
		设备树信息：
		fs4412-demo{
			 compatible = "hello";
			 reg = <0x114001e0 0x4>;
			 interrupt-parent = <&gpx1>;
			 interrupts = <1 0>;
		};
		
【2】i2c总线驱动
	硬件知识：
		i2c两根线：
			scl :时钟线
			sda :数据线
		
		几种信号：
			起始信号：scl为高电平时，sda下降沿
			结束信号：scl为高电平时，sda上降沿
			应答信号：从机发个主机，从机把sda拉为低电平
	
		两种时序：
			写：start+7位地址+0+ack+reg(8位)+ack+data+ack+stop

			读：start+7位地址+0+ack+reg(8位)+ack+start+7位地址+1+
			ack + data + NO ack + stop 
			
		总线传输数据
			低速   全速  高速
			100K   400K  3.4M
		
		i2c总线类型：
			半双工
	
	软件（i2c驱动框架）
user:	app :open  read  write close
------------------------------------------------------------
kernel:|设备驱动：驱动工程师完成的
	   |		1.为应用层提供读写的接口(字符设备驱动)
	   |        2.封装数据发送数据
	   |----------------------------------------------------
	   |核心层：linux内核工程师完成
	   |	 1.完成设备驱动和总线驱动匹配的过程
	   |	 2.提供设备驱动和总线驱动注册和注销的方法
	   |----------------------------------------------------
	   |i2c(总线驱动)控制器驱动：厂商实现的
	   |	1.接收设备驱动发过来的数据包
	   |	2.通过读写的时序将数据包发给相应的硬件
--------------|-------------------------------------------------
hardware：	------		
		    |    |-------------------------------scl
			|    |
			|    |-------------------------------sda
			------
	
【3】i2c驱动
	1.分配对象
		struct i2c_driver  mpu6050;
	2.初始化对象
		struct i2c_driver {
			int (*probe)(struct i2c_client *, const struct i2c_device_id *);
			//匹配成功后执行的函数
			int (*remove)(struct i2c_client *);
			//分离的时候执行的函数
			struct device_driver driver;
			//.name (名字，不能用于匹配)
			//.owner(THIS_MODULE)
			//.of_match_table (设备树匹配方式)
			const struct i2c_device_id *id_table;
			//id_table匹配方式
		};
	3.注册和注销
		注册：
		i2c_add_driver(driver)
		int i2c_register_driver(struct module *owner, struct i2c_driver *driver)
		注销：
		void i2c_del_driver(struct i2c_driver *);
		
	4.设备树信息
	mpu6050:(i2c5 0x68)
		i2c@138B0000 {
			#address-cells = <1>;                <==指定从机地址个数1
			#size-cells = <0>;                   <==指定从机地址长度0
			samsung,i2c-sda-delay = <100>;     	 <==设备树手册得到，延时
			samsung,i2c-max-bus-freq = <20000>;  <==传输速率
			pinctrl-0 = <&i2c5_bus>;   			 <==总线控制器5，pinctl是指定管脚模式的
			pinctrl-names = "default"; 			 <==在内核启动的时候会按照设置自动选择模式
			status = "okay";                     <==引用dtsi中的同名节点
	                                            
			mpu6050@68 {                        
				compatible = "samsung,mpu6050";  <==用于匹配的名字
				reg = <0x68>; <===从机地址       <===从机地址
			};
		};
		
	at24c02:(i2c3 0x1c)
			i2c@13890000 {
			#address-cells = <1>;              <==指定从机地址个数1
			#size-cells = <0>;                 <==指定从机地址长度0
			samsung,i2c-sda-delay = <100>;     <==设备树手册得到，延时
			samsung,i2c-max-bus-freq = <20000>;<==传输速率
			pinctrl-0 = <&i2c3_bus>;           <==pinctl是指定管脚模式的
			pinctrl-names = "default";         <==在内核启动的时候会按照设置自动选择模式
			status = "okay";                   <==引用dtsi中的同名节点
	
			at24c02@1c {
				compatible = "samsung,at24c02";<==用于匹配的名字
				reg = <0x1c>;                  <===从机地址
			};
		};
		
	练习：
		1.i2c驱动模板实例	
		
		
	匹配不上原因：
		1.设备树写的不对，（和驱动中的名字不一样）
		2.idtble没写
		3.i2c核心层没编译到内核中 i2c-core.c 
		4.i2c总线驱动没编译到内核中 i2c-s3c2410.c
		
【4】结构体
	1.配成成功之后创建的结构体，
	将设备信息中驱动需要关心的内容传递给驱动
	struct i2c_client {
		unsigned short addr;	   //从机地址
		char name[I2C_NAME_SIZE];  //名字
		struct i2c_adapter *adapter;//总线驱动对象
	};		
		
	2.消息结构体	
		struct i2c_msg {
			__u16 addr;	 //从机地址
			__u16 flags; //读写标志位 0写 I2C_M_RD   1读
			__u16 len;	 //消息的长度
			__u8 *buf;	 //消息的首地址
		};
				
	//有多少个起始位就有多少个消息，消息的长度是以字节来表示的
	
	int i2c_write_reg(char reg,char data)
	{
		int ret;
		char w_buf[] = {reg,data};
		struct i2c_msg w_msg[] = {
			[0] = {
				.addr  = client->addr,
				.flags = 0,
				.len   = 2,
				.buf   = w_buf,
				
			},
			
		};
		
		ret = i2c_transfer(client->adapter,w_msg, ARRAY_SIZE(w_msg));
		if(ret != 1){
			printk("write msg send error\n");
			return -EAGAIN;
			
		}
		
	}
	int i2c_read_reg(char reg)
	{
		int ret;
		char val;
		char r_buf[] = {reg};
		struct i2c_msg w_msg[] = {
			[0] = {
				.addr  = client->addr,
				.flags = 0,
				.len   = 1,
				.buf   = r_buf,
				
			},
			[1] = {
				.addr  = client->addr,
				.flags = 1,
				.len   = 1,
				.buf   = &val,
				
			},
			
		};
		ret = i2c_transfer(client->adapter,r_msg, ARRAY_SIZE(r_msg));
		if(ret != 2){
			printk("read msg send error\n");
			return -EAGAIN;
			
		}
		
		return val;
	}
	
	
	
	int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num)
	功能：将封装好的消息，从设备驱动发送到总线驱动
	参数：
		@adap :总线驱动的对象 client->adapter
		@msgs :消息的首地址
		@num  ：消息的个数
	返回值：成功返回消息的个数，失败错误码
	
【4】linux内存管理
	物理内存：
	node--->zone-->pages
	
	虚拟内存：
	1.地址
		物理地址:在datasheet中能够查到的地址称之为物理地址，实际设备的操作地址；
		虚拟地址、线性地址：在操作系统程序员能够操作的地址称之为虚拟地址；
		逻辑地址：将程序进行反汇编之后，其中能够看到的地址称之为逻辑地址；
		
	2.内存管理
		段式管理 x86
		页式管理 arm
		
	3.内存映射关系
		4g------------------------------------
	                  4k
		 -----------------------------------
			       固定内存映射区 4m-4k
	     -----------------------------------
		           高端内存映射区 4m
		 ------------------------------------
					NULL 8K(保护)
		 ------------------------------------vmalloc  end
				 vmalloc内存区120m-8m-8k
		 ------------------------------------vmalloc  start
					vmalloc offset 8m
		 ------------------------------------
					物理内存映射区896M
	   3g------------------------------------  物理内存 3g 偏移   4k + 3g
						用户空间
	   0g------------------------------------

		
	5.linux内存分配函数
		static inline void *kmalloc(size_t s, gfp_t gfp)
		功能：分配对应的虚拟内存
		参数：size:分配内存区的大小
			  flags：内存分配标志
			  GFP_KERNEL:内核可能被休眠，不能用于中断上下文中,进程上下文
			  GFP_ATOMIC：处理紧急的事务，用在中断上下文
			  
		返回值：对应虚拟地址
		特点：最大128k   , 分配虚拟地址，其虚拟地址空间连续，物理地址空间也是连续
		类似函数：kzalloc：分配虚拟内存区并清零


		void kfree(const void *x)
		功能：释放对应的虚拟内存
		参数：x:虚拟内存的起始地址
		返回值：无
		
		void *vmalloc(unsigned long size)
		功能：分配对应的虚拟内存
		参数：size:分配内存区的大小
		返回值：对应虚拟地址
		特点：分配虚拟地址，其虚拟地址空间连续，但是物理地址空间不一定连续
		
		void vfree(const void *addr)
		功能：释放对应的虚拟内存
		参数：addr:虚拟内存区的首地址
		返回值：无
		
		static inline unsigned long __get_free_page(gfp_t gfp)
		void free_page(unsigned long addr)
		unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)
		void free_pages(unsigned long addr, unsigned long order)	
	
	
		
	

	
			